{"mappings":"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","sources":["<anon>","src/scripts/cases.js"],"sourcesContent":["// Добавление обработчика для обновления при изменении размера окна (updateCasesDisplay) => handleResize\nconst casesContainer = document.getElementById(\"casesContainer\");\nconst categoriesContainer = document.getElementById(\"categoriesContainer\");\nconst SERVER_URL = \"http://localhost:8080\";\nconst state = {};\nconst caseTemplate = (href, imageUrl, altImage, title, category, gridArea, category_id)=>`\n    <a href=\"case.html?case=${encodeURIComponent(href)}\" class=\"case\" style=\"grid-area: ${gridArea}\">\n        <div class=\"container_img\">\n            <img src=\"${SERVER_URL}/uploads/${imageUrl}\" alt=\"${altImage}\" />\n        </div>\n        <p class=\"category\" data-category=\"${category_id}\">${category}</p>\n        <p class=\"title\">${title}</p>\n    </a>\n`;\nasync function loadCases() {\n    try {\n        const response = await fetch(`${SERVER_URL}/api/get_all_cases.php`);\n        state.data = await response.json();\n        state.layout = [];\n        // handleResize\n        updateCasesDisplay();\n        displayCategories(state.data.categories);\n    } catch (error) {\n        console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0434\\u043B\\u044F Cases:\", error);\n    }\n}\nloadCases();\n// Обновление отображения случаев в зависимости от ширины экрана\nconst updateCasesDisplay = ()=>{\n    casesContainer.innerHTML = \"\";\n    if (window.innerWidth >= 1200) displaySnakeCases(4, \"16vw\", state.data.cases);\n    else if (window.innerWidth <= 1200 && window.innerWidth >= 900) displaySnakeCases(3, \"21.8vw\", state.data.cases);\n    else if (window.innerWidth <= 900) displayCases(state.data.cases);\n};\nconst updateCasesDisplayWithFilteredCases = (cases)=>{\n    casesContainer.innerHTML = \"\";\n    if (window.innerWidth >= 1200) displaySnakeCases(4, \"16vw\", cases);\n    else if (window.innerWidth <= 1200 && window.innerWidth >= 900) displaySnakeCases(3, \"21.8vw\", cases);\n    else if (window.innerWidth <= 900) displayCases(cases);\n};\n// Функция отображения случаев в формате \"змейка\"\nfunction displaySnakeCases(maxRowLength, heightCase, cases) {\n    const trimData = cases;\n    state.layout.length = 0;\n    displayCases(trimData);\n    // Заполнение пустых ячеек для полного ряда\n    if (state.layout.length % maxRowLength > 0) {\n        const missingCells = maxRowLength - state.layout.length % maxRowLength;\n        state.layout.push(...Array(missingCells).fill(\".\"));\n    }\n    // Формирование шаблона сетки для CSS Grid\n    let gridTemplateAreas = \"\";\n    for(let i = 0; i < state.layout.length; i += maxRowLength){\n        const row = state.layout.slice(i, i + maxRowLength);\n        if (i / maxRowLength % 2 === 1) row.reverse();\n        gridTemplateAreas += `'${row.join(\" \")}' `;\n    }\n    const gridTemplateRows = Math.ceil(state.layout.length / maxRowLength);\n    casesContainer.style.gridTemplateRows = `repeat(${gridTemplateRows}, ${heightCase})`;\n    casesContainer.style.gridTemplateAreas = gridTemplateAreas.trim();\n}\n// Функция отображения случаев\nfunction displayCases(cases) {\n    const slidesHtml = cases.map((item)=>{\n        const itemName = `item-${item.case_id}`;\n        const count = item.block_size == 1 ? 1 : 2;\n        state.layout.push(...Array(count).fill(itemName));\n        return caseTemplate(`${item.href}`, item.image_url, item.alt_image, item.title, item.category, `item-${item.case_id}`, item.category_id);\n    }).join(\"\");\n    casesContainer.innerHTML = slidesHtml;\n}\nconst categoryTemplate = (category_id, category)=>`\n    <h3 class=\"category ${category_id === \"all\" ? \"active\" : \"\"}\" data-category=\"${category_id}\" >${category}</h3>\n`;\nfunction displayCategories(categories) {\n    const allCategory = {\n        category_id: \"all\",\n        category: \"\\u0412\\u0441\\u0435\"\n    };\n    const updatedCategories = [\n        allCategory,\n        ...categories\n    ];\n    const slidesHtml = updatedCategories.map((item)=>{\n        return categoryTemplate(item.category_id, item.category);\n    }).join(\"\");\n    categoriesContainer.innerHTML = slidesHtml;\n    addClickHandlers();\n}\nfunction addClickHandlers() {\n    const categories = document.querySelectorAll(\".category\");\n    categories.forEach((category)=>{\n        category.addEventListener(\"click\", function() {\n            const activeCategory = document.querySelector(\".active\");\n            // if (activeCategory) {\n            activeCategory.classList.remove(\"active\");\n            // }\n            category.classList.add(\"active\");\n            filterCases(category.dataset.category);\n        });\n    });\n}\nfunction filterCases(categoryId) {\n    const filteredCases = categoryId === \"all\" ? state.data.cases : state.data.cases.filter((item)=>item.category_id === categoryId);\n    updateCasesDisplayWithFilteredCases(filteredCases);\n}\n\n//# sourceMappingURL=cases.9c70965d.js.map\n","// Добавление обработчика для обновления при изменении размера окна (updateCasesDisplay) => handleResize\n\nconst casesContainer = document.getElementById('casesContainer')\nconst categoriesContainer = document.getElementById('categoriesContainer')\nconst SERVER_URL = 'http://localhost:8080'\nconst state = {}\nconst caseTemplate = (\n  href,\n  imageUrl,\n  altImage,\n  title,\n  category,\n  gridArea,\n  category_id\n) => `\n    <a href=\"case.html?case=${encodeURIComponent(\n      href\n    )}\" class=\"case\" style=\"grid-area: ${gridArea}\">\n        <div class=\"container_img\">\n            <img src=\"${SERVER_URL}/uploads/${imageUrl}\" alt=\"${altImage}\" />\n        </div>\n        <p class=\"category\" data-category=\"${category_id}\">${category}</p>\n        <p class=\"title\">${title}</p>\n    </a>\n`\n\nasync function loadCases() {\n  try {\n    const response = await fetch(`${SERVER_URL}/api/get_all_cases.php`)\n\n    state.data = await response.json()\n    state.layout = []\n\n    // handleResize\n    updateCasesDisplay()\n    displayCategories(state.data.categories)\n  } catch (error) {\n    console.error('Ошибка загрузки данных для Cases:', error)\n  }\n}\n\nloadCases()\n\n// Обновление отображения случаев в зависимости от ширины экрана\nconst updateCasesDisplay = () => {\n  casesContainer.innerHTML = ''\n  if (window.innerWidth >= 1200) {\n    displaySnakeCases(4, '16vw', state.data.cases)\n  } else if (window.innerWidth <= 1200 && window.innerWidth >= 900) {\n    displaySnakeCases(3, '21.8vw', state.data.cases)\n  } else if (window.innerWidth <= 900) {\n    displayCases(state.data.cases)\n  }\n}\n\nconst updateCasesDisplayWithFilteredCases = (cases) => {\n  casesContainer.innerHTML = ''\n  if (window.innerWidth >= 1200) {\n    displaySnakeCases(4, '16vw', cases)\n  } else if (window.innerWidth <= 1200 && window.innerWidth >= 900) {\n    displaySnakeCases(3, '21.8vw', cases)\n  } else if (window.innerWidth <= 900) {\n    displayCases(cases)\n  }\n}\n\n// Функция отображения случаев в формате \"змейка\"\nfunction displaySnakeCases(maxRowLength, heightCase, cases) {\n  const trimData = cases\n  state.layout.length = 0\n  displayCases(trimData)\n\n  // Заполнение пустых ячеек для полного ряда\n  if (state.layout.length % maxRowLength > 0) {\n    const missingCells = maxRowLength - (state.layout.length % maxRowLength)\n    state.layout.push(...Array(missingCells).fill('.'))\n  }\n\n  // Формирование шаблона сетки для CSS Grid\n  let gridTemplateAreas = ''\n  for (let i = 0; i < state.layout.length; i += maxRowLength) {\n    const row = state.layout.slice(i, i + maxRowLength)\n    if ((i / maxRowLength) % 2 === 1) {\n      row.reverse()\n    }\n    gridTemplateAreas += `'${row.join(' ')}' `\n  }\n\n  const gridTemplateRows = Math.ceil(state.layout.length / maxRowLength)\n  casesContainer.style.gridTemplateRows = `repeat(${gridTemplateRows}, ${heightCase})`\n  casesContainer.style.gridTemplateAreas = gridTemplateAreas.trim()\n}\n\n// Функция отображения случаев\nfunction displayCases(cases) {\n  const slidesHtml = cases\n    .map((item) => {\n      const itemName = `item-${item.case_id}`\n      const count = item.block_size == 1 ? 1 : 2\n      state.layout.push(...Array(count).fill(itemName))\n\n      return caseTemplate(\n        `${item.href}`,\n        item.image_url,\n        item.alt_image,\n        item.title,\n        item.category,\n        `item-${item.case_id}`,\n        item.category_id\n      )\n    })\n    .join('')\n  casesContainer.innerHTML = slidesHtml\n}\n\nconst categoryTemplate = (category_id, category) => `\n    <h3 class=\"category ${\n      category_id === 'all' ? 'active' : ''\n    }\" data-category=\"${category_id}\" >${category}</h3>\n`\n\nfunction displayCategories(categories) {\n  const allCategory = { category_id: 'all', category: 'Все' }\n  const updatedCategories = [allCategory, ...categories]\n  const slidesHtml = updatedCategories\n    .map((item) => {\n      return categoryTemplate(item.category_id, item.category)\n    })\n    .join('')\n  categoriesContainer.innerHTML = slidesHtml\n  addClickHandlers()\n}\n\nfunction addClickHandlers() {\n  const categories = document.querySelectorAll('.category')\n  categories.forEach((category) => {\n    category.addEventListener('click', function () {\n      const activeCategory = document.querySelector('.active')\n      // if (activeCategory) {\n      activeCategory.classList.remove('active')\n      // }\n      category.classList.add('active')\n\n      filterCases(category.dataset.category)\n    })\n  })\n}\n\nfunction filterCases(categoryId) {\n  const filteredCases =\n    categoryId === 'all'\n      ? state.data.cases\n      : state.data.cases.filter((item) => item.category_id === categoryId)\n\n  updateCasesDisplayWithFilteredCases(filteredCases)\n}\n"],"names":["casesContainer","document","getElementById","categoriesContainer","SERVER_URL","state","caseTemplate","href","imageUrl","altImage","title","category","gridArea","category_id","encodeURIComponent","loadCases","response","fetch","data","json","layout","updateCasesDisplay","displayCategories","categories","slidesHtml","updatedCategories","map","item","categoryTemplate","join","innerHTML","querySelectorAll","forEach","addEventListener","categoryId","activeCategory","querySelector","classList","remove","add","dataset","updateCasesDisplayWithFilteredCases","cases","filter","error","console","window","innerWidth","displaySnakeCases","displayCases","maxRowLength","heightCase","length","missingCells","push","Array","fill","gridTemplateAreas","i","row","slice","reverse","gridTemplateRows","Math","ceil","style","trim","itemName","case_id","count","block_size","image_url","alt_image"],"version":3,"file":"cases.9c70965d.js.map"}