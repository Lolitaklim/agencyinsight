{"mappings":"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","sources":["src/scripts/homepageCases.js"],"sourcesContent":["// Добавление обработчика для обновления при изменении размера окна (updateCasesDisplay) => handleResize\n\nconst casesContainer = document.getElementById('casesContainer')\n\nconst caseTemplate = (href, imageUrl, altImage, title, category, gridArea) => `\n    <a href=\"${href}\" class=\"case\" style=\"grid-area: ${gridArea}\">\n        <div class=\"container_img\">\n            <img src=\"${SERVER_URL}/uploads/${imageUrl}\" alt=\"${altImage}\" />\n        </div>\n        <p class=\"category\">${category}</p>\n        <p class=\"title\">${title}</p>\n    </a>\n`\n\n// Функция обрезки массива случаев до нужного размера\nfunction trimCases(cases, targetSize) {\n  let totalSize = 0\n  let trimmedCases = []\n  for (let i = 0; i < cases.length; i++) {\n    let caseSize = parseInt(cases[i].block_size, 10)\n\n    if (totalSize + caseSize <= targetSize) {\n      totalSize += caseSize\n      trimmedCases.push(cases[i])\n    } else if (totalSize + 1 == targetSize && caseSize == 2) {\n      // Создаем копию элемента и изменяем ее\n      let modifiedCase = { ...cases[i], block_size: '1' }\n      totalSize += 1\n      trimmedCases.push(modifiedCase)\n    }\n    if (totalSize === targetSize) break\n  }\n  return trimmedCases\n}\n\nasync function loadCases() {\n  try {\n    const response = await fetch(`${SERVER_URL}/api/get_homepage_cases.php`)\n    state.data = await response.json()\n    state.layout = []\n\n    // handleResize\n    updateCasesDisplay()\n  } catch (error) {\n    console.error('Ошибка загрузки данных для Cases:', error)\n  }\n}\n\nloadCases()\n\n// Обновление отображения случаев в зависимости от ширины экрана\nconst updateCasesDisplay = () => {\n  casesContainer.innerHTML = ''\n  if (window.innerWidth >= 1200) {\n    displaySnakeCases(4, 8)\n  } else if (window.innerWidth <= 1200 && window.innerWidth >= 900) {\n    displaySnakeCases(3, 6)\n  } else if (window.innerWidth <= 900 && window.innerWidth >= 650) {\n    displayCases(state.data.slice(0, 4))\n  } else if (window.innerWidth <= 650) {\n    displayCases(state.data.slice(0, 3))\n  }\n}\n\n// Функция отображения случаев в формате \"змейка\"\nfunction displaySnakeCases(maxRowLength, maxBlocks) {\n  const trimData = trimCases(state.data, maxBlocks)\n\n  state.layout.length = 0\n  displayCases(trimData)\n\n  // Заполнение пустых ячеек для полного ряда\n  if (state.layout.length % maxRowLength > 0) {\n    const missingCells = maxRowLength - (state.layout.length % maxRowLength)\n    state.layout.push(...Array(missingCells).fill('.'))\n  }\n\n  // Формирование шаблона сетки для CSS Grid\n  let gridTemplateAreas = ''\n  for (let i = 0; i < state.layout.length; i += maxRowLength) {\n    const row = state.layout.slice(i, i + maxRowLength)\n    if ((i / maxRowLength) % 2 === 1) {\n      row.reverse()\n    }\n    gridTemplateAreas += `'${row.join(' ')}' `\n  }\n  casesContainer.style.gridTemplateAreas = gridTemplateAreas.trim()\n}\n\n// Функция отображения случаев\nfunction displayCases(cases) {\n  const slidesHtml = cases\n    .map((item) => {\n      const itemName = `item-${item.display_order}`\n      const count = item.block_size == 1 ? 1 : 2\n      state.layout.push(...Array(count).fill(itemName))\n\n      return caseTemplate(\n        `#${item.href}`,\n        item.image_url,\n        item.alt_image,\n        item.title,\n        item.category,\n        `item-${item.display_order}`\n      )\n    })\n    .join('')\n  casesContainer.innerHTML = slidesHtml\n}\n"],"names":[],"version":3,"file":"index.bd6eeaec.js.map","sourceRoot":"/__parcel_source_root/"}