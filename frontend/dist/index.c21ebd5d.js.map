{"mappings":"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","sources":["<anon>","src/scripts/homepage/cases.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire834e\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire834e\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"3YRFJ\", function(module, exports) {\n\n$parcel$export(module.exports, \"updateCasesDisplay\", () => $2e609bdce757bc3f$export$be0d14ac10143e78);\n\nvar $aQc8T = parcelRequire(\"aQc8T\");\nconst $2e609bdce757bc3f$var$state = {};\n// Добавление обработчика для обновления при изменении размера окна (updateCasesDisplay) => handleResize\nconst $2e609bdce757bc3f$var$casesContainer = document.getElementById(\"casesContainer\");\nconst $2e609bdce757bc3f$var$caseTemplate = (href, imageUrl, altImage, title, category, gridArea)=>`\n    <a href=\"${href}\" class=\"case\" style=\"grid-area: ${gridArea}\">\n        <div class=\"container_img\">\n            <img src=\"${0, $aQc8T.SERVER_URL}/uploads/${imageUrl}\" alt=\"${altImage}\" />\n        </div>\n        <p class=\"category\">${category}</p>\n        <p class=\"title\">${title}</p>\n    </a>\n`;\n// Функция обрезки массива случаев до нужного размера\nfunction $2e609bdce757bc3f$var$trimCases(cases, targetSize) {\n    let totalSize = 0;\n    let trimmedCases = [];\n    for(let i = 0; i < cases.length; i++){\n        let caseSize = parseInt(cases[i].block_size, 10);\n        if (totalSize + caseSize <= targetSize) {\n            totalSize += caseSize;\n            trimmedCases.push(cases[i]);\n        } else if (totalSize + 1 == targetSize && caseSize == 2) {\n            // Создаем копию элемента и изменяем ее\n            let modifiedCase = {\n                ...cases[i],\n                block_size: \"1\"\n            };\n            totalSize += 1;\n            trimmedCases.push(modifiedCase);\n        }\n        if (totalSize === targetSize) break;\n    }\n    return trimmedCases;\n}\nasync function $2e609bdce757bc3f$var$loadCases() {\n    try {\n        const response = await fetch(`${(0, $aQc8T.SERVER_URL)}/api/get_homepage_cases.php`);\n        $2e609bdce757bc3f$var$state.data = await response.json();\n        $2e609bdce757bc3f$var$state.layout = [];\n        // handleResize\n        $2e609bdce757bc3f$export$be0d14ac10143e78();\n    } catch (error) {\n        console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445 \\u0434\\u043B\\u044F Cases:\", error);\n    }\n}\n$2e609bdce757bc3f$var$loadCases();\nconst $2e609bdce757bc3f$export$be0d14ac10143e78 = ()=>{\n    $2e609bdce757bc3f$var$casesContainer.innerHTML = \"\";\n    if (window.innerWidth >= 1200) $2e609bdce757bc3f$var$displaySnakeCases(4, 8);\n    else if (window.innerWidth <= 1200 && window.innerWidth >= 900) $2e609bdce757bc3f$var$displaySnakeCases(3, 6);\n    else if (window.innerWidth <= 900 && window.innerWidth >= 650) $2e609bdce757bc3f$var$displayCases($2e609bdce757bc3f$var$state.data.slice(0, 4));\n    else if (window.innerWidth <= 650) $2e609bdce757bc3f$var$displayCases($2e609bdce757bc3f$var$state.data.slice(0, 3));\n};\n// Функция отображения случаев в формате \"змейка\"\nfunction $2e609bdce757bc3f$var$displaySnakeCases(maxRowLength, maxBlocks) {\n    const trimData = $2e609bdce757bc3f$var$trimCases($2e609bdce757bc3f$var$state.data, maxBlocks);\n    $2e609bdce757bc3f$var$state.layout.length = 0;\n    $2e609bdce757bc3f$var$displayCases(trimData);\n    // Заполнение пустых ячеек для полного ряда\n    if ($2e609bdce757bc3f$var$state.layout.length % maxRowLength > 0) {\n        const missingCells = maxRowLength - $2e609bdce757bc3f$var$state.layout.length % maxRowLength;\n        $2e609bdce757bc3f$var$state.layout.push(...Array(missingCells).fill(\".\"));\n    }\n    // Формирование шаблона сетки для CSS Grid\n    let gridTemplateAreas = \"\";\n    for(let i = 0; i < $2e609bdce757bc3f$var$state.layout.length; i += maxRowLength){\n        const row = $2e609bdce757bc3f$var$state.layout.slice(i, i + maxRowLength);\n        if (i / maxRowLength % 2 === 1) row.reverse();\n        gridTemplateAreas += `'${row.join(\" \")}' `;\n    }\n    $2e609bdce757bc3f$var$casesContainer.style.gridTemplateAreas = gridTemplateAreas.trim();\n}\n// Функция отображения случаев\nfunction $2e609bdce757bc3f$var$displayCases(cases) {\n    const slidesHtml = cases.map((item)=>{\n        const itemName = `item-${item.display_order}`;\n        const count = item.block_size == 1 ? 1 : 2;\n        $2e609bdce757bc3f$var$state.layout.push(...Array(count).fill(itemName));\n        return $2e609bdce757bc3f$var$caseTemplate(`#${item.href}`, item.image_url, item.alt_image, item.title, item.category, `item-${item.display_order}`);\n    }).join(\"\");\n    $2e609bdce757bc3f$var$casesContainer.innerHTML = slidesHtml;\n}\n\n});\n\n\nparcelRequire(\"3YRFJ\");\n\n//# sourceMappingURL=index.c21ebd5d.js.map\n","import { SERVER_URL } from './../globalVariables'\nconst state = {}\n// Добавление обработчика для обновления при изменении размера окна (updateCasesDisplay) => handleResize\n\nconst casesContainer = document.getElementById('casesContainer')\n\nconst caseTemplate = (href, imageUrl, altImage, title, category, gridArea) => `\n    <a href=\"${href}\" class=\"case\" style=\"grid-area: ${gridArea}\">\n        <div class=\"container_img\">\n            <img src=\"${SERVER_URL}/uploads/${imageUrl}\" alt=\"${altImage}\" />\n        </div>\n        <p class=\"category\">${category}</p>\n        <p class=\"title\">${title}</p>\n    </a>\n`\n\n// Функция обрезки массива случаев до нужного размера\nfunction trimCases(cases, targetSize) {\n  let totalSize = 0\n  let trimmedCases = []\n  for (let i = 0; i < cases.length; i++) {\n    let caseSize = parseInt(cases[i].block_size, 10)\n\n    if (totalSize + caseSize <= targetSize) {\n      totalSize += caseSize\n      trimmedCases.push(cases[i])\n    } else if (totalSize + 1 == targetSize && caseSize == 2) {\n      // Создаем копию элемента и изменяем ее\n      let modifiedCase = { ...cases[i], block_size: '1' }\n      totalSize += 1\n      trimmedCases.push(modifiedCase)\n    }\n    if (totalSize === targetSize) break\n  }\n  return trimmedCases\n}\n\nasync function loadCases() {\n  try {\n    const response = await fetch(`${SERVER_URL}/api/get_homepage_cases.php`)\n    state.data = await response.json()\n    state.layout = []\n\n    // handleResize\n    updateCasesDisplay()\n  } catch (error) {\n    console.error('Ошибка загрузки данных для Cases:', error)\n  }\n}\n\nloadCases()\n\n// Обновление отображения случаев в зависимости от ширины экрана\nexport const updateCasesDisplay = () => {\n  casesContainer.innerHTML = ''\n  if (window.innerWidth >= 1200) {\n    displaySnakeCases(4, 8)\n  } else if (window.innerWidth <= 1200 && window.innerWidth >= 900) {\n    displaySnakeCases(3, 6)\n  } else if (window.innerWidth <= 900 && window.innerWidth >= 650) {\n    displayCases(state.data.slice(0, 4))\n  } else if (window.innerWidth <= 650) {\n    displayCases(state.data.slice(0, 3))\n  }\n}\n\n// Функция отображения случаев в формате \"змейка\"\nfunction displaySnakeCases(maxRowLength, maxBlocks) {\n  const trimData = trimCases(state.data, maxBlocks)\n\n  state.layout.length = 0\n  displayCases(trimData)\n\n  // Заполнение пустых ячеек для полного ряда\n  if (state.layout.length % maxRowLength > 0) {\n    const missingCells = maxRowLength - (state.layout.length % maxRowLength)\n    state.layout.push(...Array(missingCells).fill('.'))\n  }\n\n  // Формирование шаблона сетки для CSS Grid\n  let gridTemplateAreas = ''\n  for (let i = 0; i < state.layout.length; i += maxRowLength) {\n    const row = state.layout.slice(i, i + maxRowLength)\n    if ((i / maxRowLength) % 2 === 1) {\n      row.reverse()\n    }\n    gridTemplateAreas += `'${row.join(' ')}' `\n  }\n  casesContainer.style.gridTemplateAreas = gridTemplateAreas.trim()\n}\n\n// Функция отображения случаев\nfunction displayCases(cases) {\n  const slidesHtml = cases\n    .map((item) => {\n      const itemName = `item-${item.display_order}`\n      const count = item.block_size == 1 ? 1 : 2\n      state.layout.push(...Array(count).fill(itemName))\n\n      return caseTemplate(\n        `#${item.href}`,\n        item.image_url,\n        item.alt_image,\n        item.title,\n        item.category,\n        `item-${item.display_order}`\n      )\n    })\n    .join('')\n  casesContainer.innerHTML = slidesHtml\n}\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$2e609bdce757bc3f$export$be0d14ac10143e78","set","s","enumerable","configurable","$aQc8T","$2e609bdce757bc3f$var$state","$2e609bdce757bc3f$var$casesContainer","document","getElementById","$2e609bdce757bc3f$var$caseTemplate","href","imageUrl","altImage","title","category","gridArea","SERVER_URL","$2e609bdce757bc3f$var$loadCases","response","fetch","data","json","layout","error","console","innerHTML","window","innerWidth","$2e609bdce757bc3f$var$displaySnakeCases","$2e609bdce757bc3f$var$displayCases","slice","maxRowLength","maxBlocks","trimData","$2e609bdce757bc3f$var$trimCases","cases","targetSize","totalSize","trimmedCases","i","length","caseSize","parseInt","block_size","push","modifiedCase","missingCells","Array","fill","gridTemplateAreas","row","reverse","join","style","trim","slidesHtml","map","item","itemName","display_order","count","image_url","alt_image"],"version":3,"file":"index.c21ebd5d.js.map"}